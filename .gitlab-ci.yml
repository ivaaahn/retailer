workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  PY_VERSION: "3.10"
  POETRY_VERSION: "1.2.2"
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}/main
  PIP_CACHE_KEY: "pip-cache"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"


image: python:${PY_VERSION}

stages:
  - lint
  - unit_tests
  - build
#  - integration_test

#cache:
#  key:
#    files:
#      - poetry.lock
#      - .gitlab-ci.yml
#    prefix: ${CI_JOB_NAME}
#  paths:
#    - .venv
#    - .cache/pip

linters:
  stage: lint
  when: manual
  cache:
    - key: ${PIP_CACHE_KEY}
      paths:
        - ${PIP_CACHE_DIR}
    - key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
      paths:
        - .venv
  tags:
    - local
    - docker
  before_script:
    - pip install poetry==${POETRY_VERSION}
    - poetry config virtualenvs.in-project true
    - poetry install --only linters
  script:
    - poetry run black --check --diff .
    - poetry run isort --check --diff .

unit_tests:
  stage: unit_tests
  when: manual
  cache:
    - key: ${PIP_CACHE_KEY}
      paths:
        - ${PIP_CACHE_DIR}
      policy: pull
    - key:
        files:
          - poetry.lock
      paths:
        - .venv
  tags:
    - local
    - docker
  before_script:
    - pip install poetry==${POETRY_VERSION}
    - poetry config virtualenvs.in-project true
    - poetry install --without linters --without dev
  script:
    - poetry run pytest -vv --color=yes --junitxml="pytest-junit.xml" ./retailer/tests/app/unit
  artifacts:
    when: always
    reports:
      junit: pytest-junit.xml

build_image:
  stage: build
  tags:
    - local
    - shell
  before_script:
    - export APP_VERSION=$(grep -E -o "(version = \")(.*)\"" pyproject.toml | cut -d\" -f2)
    - echo "APP_VERSION=${APP_VERSION}" >> pipeline.env
  script:
    - docker build -f deploy/test/Dockerfile -t ${IMAGE_NAME}:${APP_VERSION} .
  artifacts:
    reports:
      dotenv:
        - pipeline.env

push_image:
  stage: build
  tags:
    - local
    - shell
  needs:
    - build_image
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker push ${IMAGE_NAME}:${APP_VERSION}

#integration_tests:
#  when: manual
#  stage: integration_test
#  tags:
#    - local
#    - docker
#  before_script:
#    - pip install poetry==${POETRY_VERSION}
#    - poetry config virtualenvs.in-project true
#    - poetry install --without linters --without dev
#  script:
#    - poetry run pytest -vv --color=yes --junitxml="pytest-junit.xml" ./retailer/tests/app/unit
#  artifacts:
#    when: always
#    reports:
#      junit: pytest-junit.xml


